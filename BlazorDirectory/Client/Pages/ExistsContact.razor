@page "/ExistsContact"
@using BlazorDirectory.Shared;
@inject HttpClient Http
@inject NavigationManager Navigation


<h3>Existe contacto</h3>

<EditForm Model="@_contact">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Nombre: </label>
        <InputText style="text-transform:uppercase;" @bind-Value="_contact.name" />
        <ValidationMessage For="@(() => _contact.name)" />
        <button type="submit" class="btn btn-success" @onclick="(() => ExistsContacts(_contact.name))">Existe
            Contacto</button>
    </div>
</EditForm>

<div class="alert alert-secondary mt-4">
    <span class="oi oi-person me-2" aria-hidden="true"></span>
    <strong>Informaci√≥n del contacto</strong><br><br>
    <span class="text-nowrap">
        <p>Mensaje : @message</p>
    </span>
</div>

@code {
    private Contact _contact = new Contact();
    string message = "";
    private string name = "";
    private string nameExists = "";
    private string upperName = "";

    private async Task ExistsContacts(string name)
    {
        if (name == "")
        {
            message = "El campo no puede ser vacio";
        }
        else
        {
            upperName = name.ToUpper();
            name = upperName;

            nameExists = nameEmpty(name);

            var existsResponse = await
            Http.GetFromJsonAsync<bool>($"https://localhost:7163/api/contact/existsContact/{nameExists}");
            if (existsResponse)
            {

                message = "El contacto con el nombre " + nameExists + " existe en el directorio";
            }
            else
            {
                message = "El contacto con el nombre " + nameExists + " NO existe en el directorio";
            }

        }
    }

    public string nameEmpty(string name)
    {
        if (name == null || name == "")
        {
            name = "0";
            return name;
        }
        return name;
    }
}
